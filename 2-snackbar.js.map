{"version":3,"file":"2-snackbar.js","sources":["../src/js/2-snackbar.js"],"sourcesContent":["'use strict';\n\n// Підключаємо бібліотеку iziToast для показу pop-up повідомлень та її CSS для коректного відображення\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\n// Отримуємо доступ до HTML-елемента форми за допомогою document.querySelector('.form')\nconst form = document.querySelector('.form');\n\n// Додаємо слухач події submit на форму, що викликає функцію-обробник handleSubmit при відправці форми\nform.addEventListener('submit', handleSubmit);\n\n// Створюємо функцію-обробник події handleSubmit\nfunction handleSubmit(event) {\n  event.preventDefault(); // скасовує стандартну поведінку браузера при відправці форми, запобігаючи перезавантаженню сторінки.\n\n  const delay = parseInt(event.target.delay.value); // бере значення введене в поле з name=\"delay\" (в інпуті), а parseInt перетворює його в число.\n\n  const state = event.target.state.value; // отримує значення обраної радіо-кнопки з групи з ім'ям state\n\n  // Створення промісу\n  // У колбек-функції setTimeout реалізується затримка на основі введеного значення delay, а умова для resolve та reject перевіряє значення стану.\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (state === 'fulfilled') {\n        resolve(delay);\n      } else {\n        reject(delay);\n      }\n    }, delay);\n  });\n\n  // Очищаємо форму, скидаючи всі поля вводу до їхніх початкових значень\n  form.reset();\n\n  // Обробляємо проміс\n  // Коли проміс виконується успішно (тобто викликається resolve), обробляємо результат за допомогою методу then\n  // В цьому випадку, якщо state дорівнює 'fulfilled', буде виведено повідомлення про успішне виконання з використанням iziToast.success, яке містить текст ✅ Fulfilled promise in ${delay}ms. Повідомлення з'явиться в верхньому правому куті.\n\n  // Якщо проміс НЕ виконується успішно (викликається reject), обробляємо це за допомогою методу catch\n  // У випадку, якщо state не дорівнює 'fulfilled', відобразиться повідомлення про помилку за допомогою iziToast.error з текстом ❌ Rejected promise in ${delay}ms, також у верхньому правому куті.\n  promise\n    .then(delay => {\n      iziToast.success({\n        title: '✅ Fulfilled',\n        message: `promise in ${delay}ms`,\n        position: 'topRight',\n      });\n    })\n    .catch(delay => {\n      iziToast.error({\n        title: '❌ Rejected',\n        message: `promise in ${delay}ms`,\n        position: 'topRight',\n      });\n    });\n}\n"],"names":["form","handleSubmit","event","delay","state","promise","resolve","reject","iziToast"],"mappings":"mIAOA,MAAMA,EAAO,SAAS,cAAc,OAAO,EAG3CA,EAAK,iBAAiB,SAAUC,CAAY,EAG5C,SAASA,EAAaC,EAAO,CAC3BA,EAAM,eAAc,EAEpB,MAAMC,EAAQ,SAASD,EAAM,OAAO,MAAM,KAAK,EAEzCE,EAAQF,EAAM,OAAO,MAAM,MAI3BG,EAAU,IAAI,QAAQ,CAACC,EAASC,IAAW,CAC/C,WAAW,IAAM,CACXH,IAAU,YACZE,EAAQH,CAAK,EAEbI,EAAOJ,CAAK,CAEf,EAAEA,CAAK,CACZ,CAAG,EAGDH,EAAK,MAAK,EAQVK,EACG,KAAKF,GAAS,CACbK,EAAS,QAAQ,CACf,MAAO,cACP,QAAS,cAAcL,CAAK,KAC5B,SAAU,UAClB,CAAO,CACP,CAAK,EACA,MAAMA,GAAS,CACdK,EAAS,MAAM,CACb,MAAO,aACP,QAAS,cAAcL,CAAK,KAC5B,SAAU,UAClB,CAAO,CACP,CAAK,CACL"}